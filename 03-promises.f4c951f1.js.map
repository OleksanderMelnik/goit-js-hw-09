{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SA2CA,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAjDEQ,SAASC,cAAc,SAE/BC,iBAAiB,UAExB,SAA2BC,GACzBA,EAAEC,iBAEF,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAEK,cAAcC,SAEhD,GAAIJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,OAAS,EACvDC,EAAAvB,GAASwB,OAAOC,QAAQ,2CAEtB,IAAG,IAAIC,EAAI,EAAGA,EAAIP,EAAOG,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACnB,MAAME,EAAaC,OAAOZ,EAAMK,OAASJ,EAAKI,MAAQI,EAKtDxB,EAAcyB,EAAUC,GACrBE,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBmB,EAAAvB,GAASwB,OAAOO,QACd,uBAAqB5B,QAAiBC,MAAU,IAGnD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBmB,EAAAvB,GAASwB,OAAOC,QACd,sBAAoBtB,QAAeC,MAAU,G,CAMvDW,EAAEK,cAAca,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', callCreatePromise);\n\nfunction callCreatePromise(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.currentTarget.elements;\n\n  if (delay.value < 0 || step.value < 0 || amount.value <= 0) {\n    Notiflix.Notify.failure(`❌ ENTER a number greater than ZERO`);\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const firstDelay = Number(delay.value) + step.value * i;\n\n      // console.log(typeof firstDelay);\n      // console.log(typeof position);\n\n      createPromise(position, firstDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n\n  e.currentTarget.reset();\n\n}\n\nfunction createPromise(position, delay) {\n  \n  return new Promise((resolve, reject) => {\n\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","step","amount","currentTarget","elements","value","$parcel$interopDefault","Notify","failure","i","position1","firstDelay","Number","then","success","catch","reset"],"version":3,"file":"03-promises.f4c951f1.js.map"}